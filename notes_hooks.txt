new hooks : 
useContext

useReducer




-----------
Alternative to redux => context API
to mangage app level state in small and medium size app


In SRC new folder => context
different ressources should be broken up in differents contexts







////////////////////////////////////////////////
src/context : 
    github (folder)
        githubContext.js    // initializing a new context => see file
        githubReducer.js    // any changes made to the 'states' are going to be in here => see file
        GithubState.js      // our actions => see file
    types.js                // relevant to all the files in 'src/context/github'. 
                                types = variation of strings to call to change a state within the reducer

GithubState: include all our actions
we call an action, which make a request to github, then get a response
then we dispatch a type back to our Reducer
-----
GithubContext:
1. bring it the conxtext (GithubContext.Provider) in with 'uppercase' G 
    import GithubContext from '../../context/github/githubContext';
2. initialise it with 'lowercase' g :
    const githubContext = useContext(GithubContext);
then you can use them in the object where you initialise it



common work flow : 
...
src / 
    components...
    context
        xContext.js 
        xReducer.js
        XState.js
...

AlertState.js 
Our actions here will always 'dispatch' an 'object' to the 'Reducer', with a 'type' and a payload (here, in a object with a message and a type)
  // Set Alert
  const setAlert = (msg, type) => {
    dispatch({
      type: SET_ALERT,
      payload: { msg, type }
    });



for SET_ALERT, we'll return the payload, the Alert object { msg, type }
and the RMOVE_ALERT, back to null

export default(state, action) => {
  switch(action.type) {
    case SET_ALERT:
      return action.payload;
    case REMOVE_ALERT:
        return null;
    default: 
      return state;
  }
};

TO DEPLOY :: 
Netlify
CLI

---
we don't want to use those on production mode, so...
REACT_APP_GITHUB_CLIENT_ID=''
REACT_APP_GITHUB_CLIENT_SECRET='' 

in GithubState, below the import but before the const GithubState...

  let githubClientID;
  let githubClientSecret;

  if (process.env.NODE_ENV !== 'production') {
    githubClientID = process.env.REACT_APP_GITHUB_CLIENT_ID
    githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET
  } else {
    githubClientID = process.env.GITHUB_CLIENT_ID
    githubClientSecret = process.env.GITHUB_CLIENT_SECRET
  }
....

______________
stop the server Ctrl+C
______________
create a Netlify account
create a file (in roots) netlify.toml
in which : 
[build]
  publish="build" // production build

then
PS C:\Users\RLAB\Desktop\Roxanne\react_refactoring> npm i -g netlify-cli
PS C:\Users\RLAB\Desktop\Roxanne\react_refactoring> netlify init
...

In Netlify: 
In deploys settings / Environment / Environment variables (so that it is store on the server, thus more secure)
  Key : GITHUB_CLIENT_ID          Value: ...
  Key : GITHUB_CLIENT_SECRET      Value: ...

back to the termninal: 
npm run build
netlify deploy--prod

___________________________________________________________________
////////////////////////////////////////////////////////////////
context API, useReducer, useContext, useState, useEffect
